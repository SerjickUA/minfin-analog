// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinfinAnalog.Data;

#nullable disable

namespace MinfinAnalog.Data.Migrations
{
    [DbContext(typeof(MinfinAnalogContext))]
    [Migration("20211213022220_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Сurrencies", (string)null);
                });

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DestinationCurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExchangeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("SourceCurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCurrencyId");

                    b.HasIndex("SourceCurrencyId");

                    b.ToTable("CurrencyRates", (string)null);
                });

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.UserExchangeOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BankFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DestinationCurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExchangeOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SourceCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCurrencyId");

                    b.HasIndex("SourceCurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("ExchangeOperationsHistory", (string)null);
                });

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.UserWatchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWatchlist", (string)null);
                });

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.CurrencyRate", b =>
                {
                    b.HasOne("MinfinAnalog.Domain.Entities.Currency", "DestinationCurrency")
                        .WithMany()
                        .HasForeignKey("DestinationCurrencyId");

                    b.HasOne("MinfinAnalog.Domain.Entities.Currency", "SourceCurrency")
                        .WithMany()
                        .HasForeignKey("SourceCurrencyId");

                    b.Navigation("DestinationCurrency");

                    b.Navigation("SourceCurrency");
                });

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.UserExchangeOperation", b =>
                {
                    b.HasOne("MinfinAnalog.Domain.Entities.Currency", "DestinationCurrency")
                        .WithMany()
                        .HasForeignKey("DestinationCurrencyId");

                    b.HasOne("MinfinAnalog.Domain.Entities.Currency", "SourceCurrency")
                        .WithMany()
                        .HasForeignKey("SourceCurrencyId");

                    b.HasOne("MinfinAnalog.Domain.Entities.User", "User")
                        .WithMany("ExchangeOperations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationCurrency");

                    b.Navigation("SourceCurrency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.UserWatchlist", b =>
                {
                    b.HasOne("MinfinAnalog.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("MinfinAnalog.Domain.Entities.User", "User")
                        .WithMany("UserWatchlists")
                        .HasForeignKey("UserId");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinfinAnalog.Domain.Entities.User", b =>
                {
                    b.Navigation("ExchangeOperations");

                    b.Navigation("UserWatchlists");
                });
#pragma warning restore 612, 618
        }
    }
}
